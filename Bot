--- Code

oadstring(game:HttpGet("https://raw.githubusercontent.com/Rano194/Scripts/refs/heads/main/PlayButtonNew"))()

task.wait(15)

StorageAccount = getgenv().Config["StorageAccount"]
petName = getgenv().Config["PetName"]
PerPotion = getgenv().Config["PerPotionPet"]
AutoFuse = getgenv().Config["AutoFuse"]

-- Getting info inventory
local clientData = require(game.ReplicatedStorage.ClientModules.Core.ClientData)
local playerData = clientData.get_data()[tostring(game.Players.LocalPlayer)]
local localplayer = game.Players.LocalPlayer.Name

-- Getting Potion count
local pet_age_potion = 0
for _, item in pairs(playerData.inventory.food or {}) do
    if item.kind == "pet_age_potion" then
        pet_age_potion += 1
    end
end

---- Getting need pets count
local pets_count = 0
for _, pet in pairs(playerData.inventory.pets or {}) do
    if pet.kind == petName and pet.properties.age < 6 and not pet.properties.mega_neon then
        pets_count += 1
    end
end

local NeedPets = math.floor(pet_age_potion / PerPotion)
local TotalNeedPets = NeedPets
local NeedPets = math.max(NeedPets - pets_count, 0)

-- Anti Afk
task.spawn(function()
    local vu = game:GetService("VirtualUser")
    while true do
        task.wait(300)
        vu:CaptureController()
        vu:ClickButton2(Vector2.new())
        workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame * CFrame.Angles(0, math.rad(math.random(-2,2)), 0)
    end
end)

-- Console
print("[INFO] Loading information | Farmer Account")
print("-----------------------------------------")
print("[INFO] Age-Potion: "..pet_age_potion)
print("[INFO] Need pets: "..NeedPets)

-- Dehash script
loadstring(game:HttpGet("https://raw.githubusercontent.com/Rano194/Others/refs/heads/main/Dehash"))()
print("[INFO] loading dehash remote")

-- Enable Trade Everyone
local args = {
	"trade_requests",
	1
}
game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("SettingsAPI/SetSetting"):FireServer(unpack(args))

-- Check

if NeedPets == 0 then
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Rano194/Scripts/refs/heads/main/Gui"))()
end

-- Get Pets
local requestFunc = syn and syn.request or http_request or request
requestFunc({ Url = "https://temesssss.pythonanywhere.com/api/SendInfoAccounts?Name="..localplayer.."&NeedPets="..NeedPets.."&Status=WaitGivePets", Method = "GET" })

-- Function Trade

local nickname_player_trade = nil
local trade_checked = false

game.ReplicatedStorage.API["TradeAPI/TradeRequestReceived"].OnClientEvent:Connect(function(player)
    if trade_checked == false then
        trade_checked = true
        game.ReplicatedStorage.API["TradeAPI/AcceptOrDeclineTradeRequest"]:InvokeServer(player, true)
        game.Players.LocalPlayer.PlayerGui.DialogApp.Dialog.Visible = false
        nickname_player_trade = player.Name
        print("[INFO] Accept trade | "..player.Name)
    else
        game.ReplicatedStorage.API["TradeAPI/AcceptOrDeclineTradeRequest"]:InvokeServer(player, false)
        print("[INFO] Decline trade | "..player.Name)
    end
end)

local limited = 0
while true do
    task.wait(1)
    -- Check Pets count
    local pets_count = 0
    for _, pet in pairs(playerData.inventory.pets or {}) do
        if pet.kind == petName and pet.properties.age < 6 and not pet.properties.mega_neon then
            pets_count += 1
        end
    end
    
    if pets_count == TotalNeedPets then
        break
    end

    if limited == 10 then
        local res = requestFunc({ Url = "https://temesssss.pythonanywhere.com/api/GetPetsStock", Method = "GET" })
        local data = game:GetService("HttpService"):JSONDecode(res.Body)   
        local StockPetsOwned = data.PetsStock

        if StockPetsOwned == 0 then
            break
        end
        local limited = 0
    end

    local limited += 1
    -- Check Enabled Trade
    if game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.Visible == true then
        task.wait(3)
        while true do
            task.wait(0.5)
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/AcceptNegotiation"):FireServer()
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/ConfirmTrade"):FireServer()
            if game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.Visible == false then
                task.wait(3)
                trade_checked = false
                print("[INFO] Finish trade")
                break
            end
        end
    end
end

-- Auto Fuse Pets
if autoFuse then
    task.spawn(function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Rano194/Scripts/refs/heads/main/AutoFusionPet"))()
    end)
end

------------------------------------------------------------------------- Auto Feed pets

local clientData = require(game.ReplicatedStorage.ClientModules.Core.ClientData)

-- === function ===
local function getPlayerData()
    return clientData.get_data()[tostring(game.Players.LocalPlayer)]
end

local function getAgePotions()
    local potions = {}
    for _, item in pairs(getPlayerData().inventory.food or {}) do
        if item.kind == "pet_age_potion" then
            table.insert(potions, item)
        end
    end
    return potions
end

local function getPets(petName)
    local pets = {}
    for _, pet in pairs(getPlayerData().inventory.pets or {}) do
        if pet.kind == petName and pet.properties.age < 6 then
            table.insert(pets, pet)
        end
    end
    return pets
end

while true do
    local agePotions = getAgePotions()
    local pets = getPets(petName)

    if #agePotions < PerPotion then
        warn("Potion sold (" .. #agePotions .. "/" .. PerPotion .. ")")
        break
    end

    if #pets == 0 then
        break
    end

    local selectedPet = table.remove(pets, 1)
    local selectedPotions = {}
    for i = 1, PerPotion do
        table.insert(selectedPotions, table.remove(agePotions, 1))
    end

    game.ReplicatedStorage.API["ToolAPI/Equip"]:InvokeServer(selectedPet.unique, {use_sound_delay = true})
    game.ReplicatedStorage.API["ToolAPI/Equip"]:InvokeServer(selectedPotions[1].unique, {use_sound_delay = true})
    task.wait(0.2)

    local potionUniques = {}
    for i = 1, PerPotion - 1 do
        table.insert(potionUniques, selectedPotions[i].unique)
    end

    local ok, err = pcall(function()
        game.ReplicatedStorage.API["PetObjectAPI/CreatePetObject"]:InvokeServer(
            "__Enum_PetObjectCreatorType_2",
            {
                additional_consume_uniques = potionUniques,
                pet_unique = selectedPet.unique,
                unique_id = selectedPotions[PerPotion].unique
            }
        )
    end)
    if not ok then warn("error feed:", err) end

    local petModel
    for _ = 1, 50 do
        local found = workspace:WaitForChild("PetObjects"):FindFirstChildWhichIsA("Model")
        if found then
            petModel = found
            break
        end
        task.wait(0.05)
    end

    if petModel then
        game.ReplicatedStorage.API["PetAPI/ConsumeFoodObject"]:FireServer(petModel, selectedPet.unique)
    else
        warn("Error: no found pet model")
    end

    task.wait(0.2)
end

-- function

function GetFilteredPets(petName, maxCount)
    local playerData = clientData.get_data()[tostring(game.Players.LocalPlayer)]
    local filteredPets = {}

    for _, pet in pairs(playerData.inventory.pets or {}) do
        if #filteredPets >= maxCount then
            break
        end

        if pet.kind == petName then
            table.insert(filteredPets, pet)
        end
    end

    return filteredPets
end

----- Back pets
requestFunc({ Url = "https://temesssss.pythonanywhere.com/api/SendInfoAccounts?Name="..localplayer.."&NeedPets="..NeedPets.."&Status=Competing", Method = "GET" })

local canceled = false
while true do
    task.wait(1)
    -- Check Pets count
    local pets_count = 0
    for _, pet in pairs(playerData.inventory.pets or {}) do
        if pet.kind == petName then
            pets_count += 1
        end
    end
    
    if pets_count == 0 then
        break
    end

    -- Check Enabled Trade
    if game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.Visible == true then
        task.wait(3)
        local pets = GetFilteredPets(petName, 18)
        for i, pet in ipairs(pets) do
            if #pets < 18 then
                canceled = true
            end
            local args = {pet.unique}
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/AddItemToOffer"):FireServer(unpack(args))
        end
        while true do
            task.wait(0.5)
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/AcceptNegotiation"):FireServer()
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/ConfirmTrade"):FireServer()
            if game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.Visible == false then
                task.wait(3)
                trade_checked = false
                print("[INFO] Finish trade")
                break
            end
        end

        if canceled then
            break
        end
    end
end

requestFunc({ Url = "https://temesssss.pythonanywhere.com/api/SendInfoAccounts?Name="..localplayer.."&NeedPets="..NeedPets.."&Status=Pending", Method = "GET" })
loadstring(game:HttpGet("https://raw.githubusercontent.com/Rano194/Scripts/refs/heads/main/Gui"))()
